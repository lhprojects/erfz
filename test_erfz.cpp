#include "erfz.h"

typedef std::complex<double> Complex;
double Pi = 3.14159265358979323846;
Complex const I(0, 1);


Complex table_IR[] = { 0, 1.31615128169794764488 + 0.19045346923783468628 * I,
1.15131086639806902401 + 0.12729162946314079101 * I,
0.86782649757545114215 - 0.01215218179031225651 * I,
0.97854923307608192587 + 0.09733969063083186534 * I,
0.93037960374309511586 + 0.03893619089512137895 * I,
1.05763424013567858929 - 0.03313911474115650049 * I,
1.01019530381928120602 - 0.05606864997179305798 * I,
1.04985175415703184758 + 0.00118700255356535929 * I,
0.96293536310820340946 - 0.02431038830374171105 * I };


Complex table_IR100[] = { 0, 0.96164937427247485984 - 0.01098768460819398838 * I, 1.01892597849978877873 + 0.00630031097986440048 * I,
1.01056598697454956474 - 0.00807456975241738992 * I, 1.00876372651256315095 + 0.00476118944202863852 * I,
0.99355384355821720447 - 0.00470202522129801472 * I, 0.99356591418518249805 + 0.00167697497774009703 * I,
0.99684311725988347685 - 0.00474496486534991532 * I, 1.00178511305841507331 + 0.00465632162087813295 * I,
1.00406893256690371018 + 0.00175856364081892457 * I };

void print_error(Complex z, Complex erfz, Complex t)
{
	printf("erf((%8.2g,%8.2g)) = (%8.2g,%8.2g): absolute error: (%8.1g,%8.1g), relative error: (%8.1g,%8.1g)\n",
		z.real(), z.imag(),
		erfz.real(), erfz.imag(),
		erfz.real() - t.real(), erfz.imag() - t.imag(),
		t.real() == 0 ? 0. : (erfz - t).real() / t.real(),
		t.imag() == 0 ? 0. : (erfz - t).imag() / t.imag());
}


void test_real()
{
	Complex ztable[] = {
		-1. + 0. * I,
		0. + 0. * I,

		1E-8 + 0. * I,

		1. + 0. * I,
		2. + 0. * I,
		10. + 0. * I,
	};
	Complex erftable[] = {
		-0.842700792949714869341220635082609259296066997966302908459937897 + 0. * I,
		0. + 0. * I,

		1.1283791670955125362835199999377938368619715834523723540730E-8 + 0. * I,

		0.842700792949714869341220635082609259296066997966302908459937897 + 0. * I,
		0.9953222650189527341620692563672529286108917970400600767383523262 + 0. * I,
		0.9999999999999999999999999999999999999999999979115124162374552430 + 0. * I,
	};

	for (int i = 0; i < sizeof(ztable) / sizeof(ztable[0]); ++i) {
		Complex z = ztable[i];
		double a = erf(1.);
		print_error(z, erfz(z), erftable[i]);
	}
}

void test_imag()
{
	Complex ztable[] = {
		-1. * I,
		0. * I,

		1E-8 * I,

		1. * I,
		2. * I,
		10. * I,
	};
	Complex erftable[] = {
		-1.65042575879754287602533772956136244389567987487402287760025799 * I,
		0. * I,

		1.128379167095512611508797806305298763272565124888770865621E-8 * I,

		1.65042575879754287602533772956136244389567987487402287760025799 * I,
		18.56480241457555259870429191324101719885800172608340681930081872 * I,
		1.5243074227086696993605466147265440624638120746988573105572E42 * I,
	};
	for (int i = 0; i < sizeof(ztable) / sizeof(ztable[0]); ++i) {
		Complex z = ztable[i];
		double a = erf(1.);
		print_error(z, erfz(z), erftable[i]);
	}
}

void test_r4()
{
	Complex table4[] = { 0.99999998458274209972,
		1.00098761435442825929 - 0.00010819923893151232 * I,
		21078.165596626114620 - 56776.666755960239698 * I,
		-21078.165596626114620 - 56776.666755960239698 * I,
		-1.00098761435442825929 - 0.00010819923893151232 * I,
		-0.99999998458274209972,
		-1.00098761435442825929 + 0.00010819923893151232 * I,
		-21078.165596626114620 + 56776.666755960239698 * I,
		21078.165596626114620 + 56776.666755960239698 * I,
		1.00098761435442825929 + 0.00010819923893151232 * I
	};

	for (int i = 0; i < 10; ++i) {
		auto z = 4.0 * exp(2 * Pi * i * I / 10.0);
		//printf("%.17f, %.17f", z.real(), z.imag());
		print_error(z, erfz(z), table4[i]);
		erfz(z);
	}
}

void test_IR()
{
	for (int i = 0; i < 10; ++i) {
		auto z = (1.0 + I) * (1.0 * i);
		print_error(z, erfz(z), table_IR[i]);
	}
}


void test_IR100()
{
	for (int i = 0; i < 10; ++i) {
		auto z = (1.0 + I) * (10.0 * i);
		print_error(z, erfz(z), table_IR100[i]);
	}
}

template<class R>
R Sqr(R i) { return i * i; }

template<class R>
R Pow4(R i) { return Sqr(Sqr(i)); }

void test_SmallRBigI()
{

	Complex table[] = {
		0.001139719178754582880782534212454241260152573234281949785506936 + 0.1132150601977005329165874201294946117466613151649143646392112 * I,
		0.233422172789100407329643384409388178012070340493316782150240258 + 5.83174871614104282943167587977494459846690804571350791195062606 * I,
		2.097138902702388588531101818586780454290671990828720553420E27 + 5.775892522956691674374324485508830820047623795104560923942E26 * I,
		4.35128862705497746404966977617880013052124160229381560365E282 + 7.41261193288834472035827573701665968832729785026336205302E282 * I,
	};

	for (int i = 0; i < 4; ++i) {
		Complex z = Pow4(0.1 * (i + 1)) * (10. + 1000. * I);
		auto r = erfz(z);
		print_error(z, erfz(z), table[i]);
	}

}

int main()
{

	test_real();
	test_imag();
	test_r4();
	test_IR();
	test_IR100();
	test_SmallRBigI();

}
