#include "../erfz.h"

typedef std::complex<double> Complex;
struct Pair {
	double first;
	Complex second;
};
double Pi = 3.14159265358979323846;
Complex const I(0, 1);

Pair real_table[] =  {
	Pair{ 5, 0.99999999999846254021 },
	Pair{ 4, 0.99999998458274209972},
	Pair{ 3, 0.99997790950300141456},
	Pair{ 2, 0.99532226501895273416},
	Pair{ 1, 0.84270079294971486934},
	Pair{ 0, 0 }
};

Complex table4[] = { 0.99999998458274209972, 1.00098761435442825929 - 0.00010819923893151232*I,
21078.165596626114620 - 56776.666755960239698*I,
-21078.165596626114620 - 56776.666755960239698*I,
-1.00098761435442825929 - 0.00010819923893151232*I,
-0.99999998458274209972,
-1.00098761435442825929 + 0.00010819923893151232*I,
-21078.165596626114620 + 56776.666755960239698*I,
21078.165596626114620 + 56776.666755960239698*I,
1.00098761435442825929 + 0.00010819923893151232*I
};

Complex table_IR[] = { 0, 1.31615128169794764488 + 0.19045346923783468628*I,
1.15131086639806902401 + 0.12729162946314079101 *I,
0.86782649757545114215 - 0.01215218179031225651 *I,
0.97854923307608192587 + 0.09733969063083186534 *I,
0.93037960374309511586 + 0.03893619089512137895 *I,
1.05763424013567858929 - 0.03313911474115650049 *I,
1.01019530381928120602 - 0.05606864997179305798 *I,
1.04985175415703184758 + 0.00118700255356535929 *I,
0.96293536310820340946 - 0.02431038830374171105 *I };


Complex table_IR100[] = {0, 0.96164937427247485984 - 0.01098768460819398838*I, 1.01892597849978877873 + 0.00630031097986440048*I,
1.01056598697454956474 - 0.00807456975241738992*I, 1.00876372651256315095 + 0.00476118944202863852*I,
0.99355384355821720447 - 0.00470202522129801472*I, 0.99356591418518249805 + 0.00167697497774009703*I,
0.99684311725988347685 - 0.00474496486534991532*I, 1.00178511305841507331 + 0.00465632162087813295*I,
1.00406893256690371018 + 0.00175856364081892457*I};

void test_real()
{
	for (int i = 0; i < 4; ++i) {
		auto r = erfz(Complex(real_table[i].first, 0));
		double a = r.real();
		double b = r.imag();
		auto ra = real_table[i].second.real();
		printf("error %.30lf\n", a - ra);
		printf("error %.30lf\n", b);
	}
}

void test_r4()
{
	for (int i = 0; i < 10; ++i) {
		auto r = erfz(4.0*exp(2*Pi*i*I/10.0));
		double a = r.real();
		double b = r.imag();
		auto ra = table4[i].real();
		auto rb = table4[i].imag();
		printf("%+10.2g, %+10.2g\n", (a - ra)/ra, (b - rb)/rb);
	}
}

void test_IR()
{
	for (int i = 0; i < 10; ++i) {
		auto r = erfz((1.0 + I) * (1.0*i));
		double a = r.real();
		double b = r.imag();
		auto ra = table_IR[i].real();
		auto rb = table_IR[i].imag();
		printf("%+10.2g, %+10.2g\n", (a - ra) / ra, (b - rb) / rb);
	}
}


void test_IR100()
{
	for (int i = 0; i < 10; ++i) {
		auto r = erfz((1.0 + I) * (10.0*i));
		double a = r.real();
		double b = r.imag();
		auto ra = table_IR100[i].real();
		auto rb = table_IR100[i].imag();
		printf("%+10.2g, %+10.2g\n", (a - ra) / ra, (b - rb) / rb);
	}
}

int main()
{

	test_real();
	test_r4();
	test_IR();
	test_IR100();

}